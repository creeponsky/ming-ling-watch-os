# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
build/
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
# .swiftpm

.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# Accio dependency management
Dependencies/
.accio/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Cursor IDE
.cursor/

# Temporary files
*.tmp
*.temp

# Logs
*.log

# Backup files
*.backup
*.bak

# Local configuration files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE specific files
.vscode/
.idea/
*.swp
*.swo
*~

# Build artifacts
*.app
*.framework
*.bundle

# Archive files
*.xcarchive

# Provisioning profiles
*.mobileprovision
*.provisionprofile

# Certificates
*.p12
*.pem
*.cer

# Keychain files
*.keychain

# App Store Connect API
*.api_key

# Test results
TestResults/
*.test_result

# Coverage reports
*.coverage
*.gcov
*.gcda
*.gcno

# Profiling data
*.prof
*.profraw

# Memory dumps
*.dmp
*.core

# Crash logs
*.crash
*.ips

# Simulator files
*.simulator

# Device support files
*.device_support

# Xcode Cloud
.xcode-cloud/

# Swift Package Manager - Package.resolved
Package.resolved

# Swift Package Manager - Package.pins
Package.pins

# Swift Package Manager - .build
.build/

# Swift Package Manager - Packages
Packages/

# Swift Package Manager - Package.swift.bak
Package.swift.bak

# Swift Package Manager - Package.swift.tmp
Package.swift.tmp

# Swift Package Manager - Package.swift.backup
Package.swift.backup

# Swift Package Manager - Package.swift.local
Package.swift.local

# Swift Package Manager - Package.swift.dev
Package.swift.dev

# Swift Package Manager - Package.swift.prod
Package.swift.prod

# Swift Package Manager - Package.swift.staging
Package.swift.staging

# Swift Package Manager - Package.swift.test
Package.swift.test

# Swift Package Manager - Package.swift.debug
Package.swift.debug

# Swift Package Manager - Package.swift.release
Package.swift.release

# Swift Package Manager - Package.swift.optimized
Package.swift.optimized

# Swift Package Manager - Package.swift.unoptimized
Package.swift.unoptimized

# Swift Package Manager - Package.swift.checked
Package.swift.checked

# Swift Package Manager - Package.swift.unchecked
Package.swift.unchecked

# Swift Package Manager - Package.swift.safe
Package.swift.safe

# Swift Package Manager - Package.swift.unsafe
Package.swift.unsafe

# Swift Package Manager - Package.swift.strict
Package.swift.strict

# Swift Package Manager - Package.swift.relaxed
Package.swift.relaxed

# Swift Package Manager - Package.swift.fast
Package.swift.fast

# Swift Package Manager - Package.swift.slow
Package.swift.slow

# Swift Package Manager - Package.swift.debug
Package.swift.debug

# Swift Package Manager - Package.swift.release
Package.swift.release

# Swift Package Manager - Package.swift.optimized
Package.swift.optimized

# Swift Package Manager - Package.swift.unoptimized
Package.swift.unoptimized

# Swift Package Manager - Package.swift.checked
Package.swift.checked

# Swift Package Manager - Package.swift.unchecked
Package.swift.unchecked

# Swift Package Manager - Package.swift.safe
Package.swift.safe

# Swift Package Manager - Package.swift.unsafe
Package.swift.unsafe

# Swift Package Manager - Package.swift.strict
Package.swift.strict

# Swift Package Manager - Package.swift.relaxed
Package.swift.relaxed

# Swift Package Manager - Package.swift.fast
Package.swift.fast

# Swift Package Manager - Package.swift.slow 


.cursor/
.trae/